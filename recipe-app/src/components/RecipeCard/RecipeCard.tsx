import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../services/auth.mock';
import { toggleSavedRecipe } from '../../services/recipes.mock';
import { Recipe } from '../../types';
import { RECIPE_TYPES } from '../../utils/constants';
import './RecipeCard.scss';

interface RecipeCardProps {
  recipe: Recipe;
  inMyRecipes?: boolean;
  onRemove?: (id: string) => void;
  showSaveButton?: boolean;
}

const RecipeCard: React.FC<RecipeCardProps> = ({ 
  recipe, 
  inMyRecipes = false,
  onRemove,
  showSaveButton = true,
}) => {
  const { user } = useAuth();
  const [saved, setSaved] = useState(recipe.savedBy?.includes(user?.email || '') || false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  const handleSaveToggle = (e: React.MouseEvent) => {
    e.preventDefault();
    if (!user) return;

    const success = toggleSavedRecipe(user.email, recipe.id);
    if (success) {
      setSaved(!saved);
    }
  };

  const handleRemoveClick = (e: React.MouseEvent) => {
    e.preventDefault();
    setShowConfirmModal(true);
  };

  const confirmRemove = (e: React.MouseEvent) => {
    e.preventDefault();
    if (onRemove) {
      onRemove(recipe.id);
    }
    setShowConfirmModal(false);
  };

  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  const recipeType = RECIPE_TYPES.find(type => type.value === recipe.type)?.label || recipe.type;

  return (
    <div className="recipe-card">
      <Link to={`/recipe/${recipe.id}`} className="recipe-link">
        <div className="recipe-image-container">
          <img src={recipe.image} alt={recipe.title} />
          
          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
          {showSaveButton && user && (
            <button
              className={`save-button ${saved ? 'saved' : ''}`}
              onClick={handleSaveToggle}
              aria-label={saved ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
            >
              {saved ? '‚ù§Ô∏è' : 'ü§ç'}
            </button>
          )}
        </div>

        <h3>{recipe.title}</h3>

        <div className="recipe-meta">
          <p>üïí ~{recipe.totalTime} –º–∏–Ω</p>
          <p>
            {Array.from({ length: 5 }, (_, i) => (
              <span key={i} className={i < recipe.difficulty ? 'star filled' : 'star'}>
                ‚òÖ
              </span>
            ))}
          </p>
        </div>
        
        <div className="recipe-bottom">
          <p className="recipe-type">{recipeType}</p>
          <p className="recipe-ingredients">
            {recipe.ingredients?.length > 0 ? `–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${recipe.ingredients.length}` : '–ù–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤'}
          </p>
        </div>
      </Link>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      {showConfirmModal && (
        <div className="modal-overlay">
          <div className="delete-confirm-modal">
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?</p>
            <div className="modal-buttons">
              <button onClick={confirmRemove} className="confirm-btn">–î–∞</button>
              <button onClick={() => setShowConfirmModal(false)} className="cancel-btn">–ù–µ—Ç</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RecipeCard;