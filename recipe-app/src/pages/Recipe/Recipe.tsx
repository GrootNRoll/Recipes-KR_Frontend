import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getRecipeById } from '../../services/recipes.mock';
import RecipeStep from '../../components/RecipeStep/RecipeStep';
import './Recipe.scss';

interface StepWithDuration {
  number: number;
  text: string;
  note?: string;
  duration?: number;
  timeLabel: string;
  startTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  endTime: number;  // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

const RecipePage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const recipe = getRecipeById(id || '');

  if (!recipe) {
    return <div>–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ "–ì–æ—Ç–æ–≤–æ"
  const stepsWithFinalStep = [...recipe.steps];
  if (stepsWithFinalStep.length > 0) {
    stepsWithFinalStep.push({
      number: stepsWithFinalStep.length + 1,
      text: '–ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!',
      duration: 0,
    });
  }

  let cumulativeTimeMin = 0;

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ **–º–∏–Ω—É—Ç–∞—Ö**
  const stepsWithTime = stepsWithFinalStep.map((step, index) => {
    const startTimeMin = cumulativeTimeMin;
    const formattedTime = `${String(Math.floor(startTimeMin / 60)).padStart(2, '0')}:${String(startTimeMin % 60).padStart(2, '0')}`;
    const stepDurationMin = step.duration || 5;
    const endTimeMin = startTimeMin + stepDurationMin;

    if (index < recipe.steps.length) {
      cumulativeTimeMin += stepDurationMin;
    }

    return {
      ...step,
      timeLabel: formattedTime,
      startTime: startTimeMin,
      endTime: endTimeMin,
    };
  });

  const totalStepsSec = cumulativeTimeMin * 60;

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [secondsElapsed, setSecondsElapsed] = useState(0);
  const [expandedStepIndex, setExpandedStepIndex] = useState<number | null>(null);

  useEffect(() => {
    setExpandedStepIndex(currentStepIndex); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  }, [currentStepIndex]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    let interval: ReturnType<typeof setInterval>;
    if (isRunning) {
      interval = setInterval(() => {
        setSecondsElapsed(prev => {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
          if (prev >= totalStepsSec) {
            setIsRunning(false);
            return prev;
          }

          const nextStep = stepsWithTime.find(step => step.startTime * 60 > prev);

          // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
          if (nextStep) {
            const nextStepStartTimeSec = nextStep.startTime * 60;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            if (prev >= nextStepStartTimeSec - 1) {
              setCurrentStepIndex(stepsWithTime.indexOf(nextStep));
            }
          }

          return prev + 1;
        });
      }, 1000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRunning, totalStepsSec, stepsWithTime]);

  const handleStart = () => setIsRunning(true);
  const handleStop = () => setIsRunning(false);

  const handleNext = () => {
    if (currentStepIndex < stepsWithTime.length - 1) {
      const nextIndex = currentStepIndex + 1;
      setCurrentStepIndex(nextIndex);
      setSecondsElapsed(stepsWithTime[nextIndex].startTime * 60); 
    }
  };

  const handlePrev = () => {
    if (currentStepIndex > 0) {
      const prevIndex = currentStepIndex - 1;
      setCurrentStepIndex(prevIndex);
      setSecondsElapsed(stepsWithTime[prevIndex].startTime * 60);
    }
  };

  const currentStep = stepsWithTime[currentStepIndex];

  // –í—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
  const currentStepDurationSec = stepsWithTime[currentStepIndex + 1]
    ? (stepsWithTime[currentStepIndex + 1].startTime - currentStep.startTime) * 60
    : 0;

  const secondsInStep = secondsElapsed - currentStep.startTime * 60;
  const progressPercent = currentStepDurationSec
    ? Math.min((secondsInStep / currentStepDurationSec) * 100, 100)
    : 0;

  const remainingTimeInStep = Math.max(0, currentStepDurationSec - secondsInStep);
  const minutesRemaining = Math.floor(remainingTimeInStep / 60);
  const secondsRemaining = remainingTimeInStep % 60;

  return (
    <div className="recipe-page">
      <div className="recipe-header">
        <h1>{recipe.title}</h1>
        <div className="recipe-meta">
          <span>üïí –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: ~{recipe.totalTime} –º–∏–Ω</span>
        </div>
      </div>

      <div className="recipe-content">
        <div className="recipe-left-column">
          <div className="recipe-image-wrapper">
            <img src={recipe.image} alt={recipe.title} />
          </div>

          <div className="recipe-details">
            <div className="recipe-difficulty">
              <span>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
              <div className="stars">
                {Array.from({ length: 5 }, (_, i) => (
                  <span key={i} className={i < recipe.difficulty ? 'star filled' : 'star'}>
                    ‚òÖ
                  </span>
                ))}
              </div>
            </div>

            <div className="ingredients">
              <h4>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é:</h4>
              <ul>
                {recipe.ingredients.map((item, index) => (
                  <li key={index}>
                    <span>{item.name}</span>
                    <span>{item.amount} {item.unit}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>

        <div className="recipe-info">
          {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ */}
          <p className="recipe-description">{recipe.description}</p>

          {/* –¢–∞–π–º–µ—Ä */}
          <div className="timer-controls">
            <h3>–¢–∞–π–º–µ—Ä</h3>
            <div className="timer-buttons">
              <button onClick={handlePrev} disabled={currentStepIndex === 0}>‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
              {!isRunning ? (
                <button onClick={handleStart}>‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç</button>
              ) : (
                <button onClick={handleStop}>‚è∏ –°—Ç–æ–ø</button>
              )}
              <button onClick={handleNext} disabled={currentStepIndex === stepsWithTime.length - 1}>
                –í–ø–µ—Ä—ë–¥ ‚û°Ô∏è
              </button>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="progress-container">
              <div className="progress-bar" style={{ width: `${progressPercent}%` }}></div>
            </div>

            {/* –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è */}
            <div className="time-remaining">
              –û—Å—Ç–∞–ª–æ—Å—å: {minutesRemaining}:{String(secondsRemaining).padStart(2, '0')}
            </div>
          </div>

          {/* –®–∞–≥–∏ —Ä–µ—Ü–µ–ø—Ç–∞ */}
          <div className="steps-container">
            {stepsWithTime.map((step, index) => (
              <RecipeStep 
                key={step.number}
                number={step.number}
                text={step.text}
                note={step.note}
                timeLabel={step.timeLabel}
                isActive={index === currentStepIndex}
                isRunning={isRunning}
                isOpen={expandedStepIndex === index}
                onToggle={() => setExpandedStepIndex(expandedStepIndex === index ? null : index)}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecipePage;